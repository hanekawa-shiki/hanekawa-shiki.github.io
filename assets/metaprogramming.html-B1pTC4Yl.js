import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as e}from"./app-cIyTkk41.js";const n={};function l(h,s){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="高级javascript特性" tabindex="-1"><a class="header-anchor" href="#高级javascript特性"><span>高级<code>JavaScript</code>特性</span></a></h1><h2 id="symbol-符号" tabindex="-1"><a class="header-anchor" href="#symbol-符号"><span><code>Symbol</code>(符号)</span></a></h2><h3 id="symbol-iterator-symbol-asynciterator" tabindex="-1"><a class="header-anchor" href="#symbol-iterator-symbol-asynciterator"><span><code>Symbol.iterator</code>&amp;<code>Symbol.asyncIterator</code></span></a></h3><p>只要实现<code>Symbol.iterator</code>或<code>Symbol.asyncIterator</code>符号的方法，这个类或者对象就是可迭代的。</p><h3 id="symbol-hasinstance" tabindex="-1"><a class="header-anchor" href="#symbol-hasinstance"><span><code>Symbol.hasInstance</code></span></a></h3><p>在ES6中，如果<code>instanceof</code>的右侧是一个有[Symbol.hasInstance]方法的对象，那么就会以左侧的值作为参数来调用这个方法并返回这个方法的值，返回值会被转换为布尔值，变成<code>intanceof</code>操作符的值。如果右侧的值没有[Symbol.hasInstance]方法且是一个函数，则<code>instanceof</code>操作符仍然照常行事。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> uint8</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  [</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Symbol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">hasInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">](</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> Number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isInteger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 255</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">128</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> instanceof</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> uint8</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">256</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> instanceof</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> uint8</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // false</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">PI</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> instanceof</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> uint8</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="symbol-tostringtag" tabindex="-1"><a class="header-anchor" href="#symbol-tostringtag"><span><code>Symbol.toStringTag</code></span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">  get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Symbal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">toStringTag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Range&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">prototype</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;[Object Range]&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="symbol-species" tabindex="-1"><a class="header-anchor" href="#symbol-species"><span><code>Symbol.species</code></span></a></h3>`,10)]))}const k=i(n,[["render",l]]),o=JSON.parse('{"path":"/ECMAScript/metaprogramming.html","title":"高级JavaScript特性","lang":"zh-CN","frontmatter":{"article":false,"description":"高级JavaScript特性 Symbol(符号) Symbol.iterator&Symbol.asyncIterator 只要实现Symbol.iterator或Symbol.asyncIterator符号的方法，这个类或者对象就是可迭代的。 Symbol.hasInstance 在ES6中，如果instanceof的右侧是一个有[Symbol.h...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"高级JavaScript特性\\",\\"description\\":\\"高级JavaScript特性 Symbol(符号) Symbol.iterator&Symbol.asyncIterator 只要实现Symbol.iterator或Symbol.asyncIterator符号的方法，这个类或者对象就是可迭代的。 Symbol.hasInstance 在ES6中，如果instanceof的右侧是一个有[Symbol.h...\\"}"],["meta",{"property":"og:url","content":"https://hanekawa.top/ECMAScript/metaprogramming.html"}],["meta",{"property":"og:site_name","content":"hanekawa-shiki"}],["meta",{"property":"og:title","content":"高级JavaScript特性"}],["meta",{"property":"og:description","content":"高级JavaScript特性 Symbol(符号) Symbol.iterator&Symbol.asyncIterator 只要实现Symbol.iterator或Symbol.asyncIterator符号的方法，这个类或者对象就是可迭代的。 Symbol.hasInstance 在ES6中，如果instanceof的右侧是一个有[Symbol.h..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-05T07:47:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-05T07:47:00.000Z"}]]},"git":{"createdTime":1719481147000,"updatedTime":1722844020000,"contributors":[{"name":"kamishima-kaede","username":"kamishima-kaede","email":"kamiacgxu@gmail.com","commits":4,"url":"https://github.com/kamishima-kaede"}]},"readingTime":{"minutes":0.58,"words":174},"filePathRelative":"ECMAScript/metaprogramming.md","excerpt":"\\n<h2><code>Symbol</code>(符号)</h2>\\n<h3><code>Symbol.iterator</code>&amp;<code>Symbol.asyncIterator</code></h3>\\n<p>只要实现<code>Symbol.iterator</code>或<code>Symbol.asyncIterator</code>符号的方法，这个类或者对象就是可迭代的。</p>\\n<h3><code>Symbol.hasInstance</code></h3>\\n<p>在ES6中，如果<code>instanceof</code>的右侧是一个有[Symbol.hasInstance]方法的对象，那么就会以左侧的值作为参数来调用这个方法并返回这个方法的值，返回值会被转换为布尔值，变成<code>intanceof</code>操作符的值。如果右侧的值没有[Symbol.hasInstance]方法且是一个函数，则<code>instanceof</code>操作符仍然照常行事。</p>","autoDesc":true}');export{k as comp,o as data};
